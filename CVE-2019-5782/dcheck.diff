diff --git a/src/code-stub-assembler.cc b/src/code-stub-assembler.cc
index 501dad9cea4..d319636f17a 100644
--- a/src/code-stub-assembler.cc
+++ b/src/code-stub-assembler.cc
@@ -2377,9 +2377,11 @@ TNode<Float64T> CodeStubAssembler::LoadFixedDoubleArrayElement(
       FixedDoubleArray::kHeaderSize + additional_offset - kHeapObjectTag;
   TNode<IntPtrT> offset = ElementOffsetFromIndex(
       index_node, HOLEY_DOUBLE_ELEMENTS, parameter_mode, header_size);
+  /*
   CSA_ASSERT(this, IsOffsetInBounds(
                        offset, LoadAndUntagFixedArrayBaseLength(object),
                        FixedDoubleArray::kHeaderSize, HOLEY_DOUBLE_ELEMENTS));
+  */
   return LoadDoubleWithHoleCheck(object, offset, if_hole, machine_type);
 }
 
diff --git a/src/objects/fixed-array-inl.h b/src/objects/fixed-array-inl.h
index aef5c8d9d85..465d6cf0d19 100644
--- a/src/objects/fixed-array-inl.h
+++ b/src/objects/fixed-array-inl.h
@@ -203,7 +203,9 @@ void FixedArray::MoveElements(Heap* heap, int dst_index, int src_index, int len,
 double FixedDoubleArray::get_scalar(int index) {
   DCHECK(map() != GetReadOnlyRoots().fixed_cow_array_map() &&
          map() != GetReadOnlyRoots().fixed_array_map());
+  /*
   DCHECK(index >= 0 && index < this->length());
+  */
   DCHECK(!is_the_hole(index));
   return READ_DOUBLE_FIELD(this, kHeaderSize + index * kDoubleSize);
 }
@@ -211,7 +213,9 @@ double FixedDoubleArray::get_scalar(int index) {
 uint64_t FixedDoubleArray::get_representation(int index) {
   DCHECK(map() != GetReadOnlyRoots().fixed_cow_array_map() &&
          map() != GetReadOnlyRoots().fixed_array_map());
+  /*
   DCHECK(index >= 0 && index < this->length());
+  */
   int offset = kHeaderSize + index * kDoubleSize;
   return READ_UINT64_FIELD(this, offset);
 }
